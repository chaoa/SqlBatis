<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlBatis</name>
    </assembly>
    <members>
        <member name="T:SqlBatis.Attributes.ColumnAttribute">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="M:SqlBatis.Attributes.ColumnAttribute.#ctor(System.String,System.Type)">
            <summary>
            属性字段映射
            </summary>
            <param name="name">字段名</param>
            <param name="type">字段类型</param>
        </member>
        <member name="T:SqlBatis.Attributes.ComplexTypeAttribute">
            <summary>
            计算列，如果字段一个是计算列则新增和修改的时候不会处理
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.ConcurrencyCheckAttribute">
            <summary>
            并发检查列，如果字段属性是number类型则用时间戳，否则使用GUID
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.DefaultAttribute">
            <summary>
            默认值约束
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.FunctionAttribute">
            <summary>
            数据库函数标识
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.IdentityAttribute">
            <summary>
            自增列标识
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.NotMappedAttribute">
            <summary>
            忽略映射
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.PrimaryKeyAttribute">
            <summary>
            主键约束
            </summary>
        </member>
        <member name="T:SqlBatis.Attributes.TableAttribute">
            <summary>
            表名映射
            </summary>
        </member>
        <member name="T:SqlBatis.IDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:SqlBatis.IDbContext.IsTransactioned">
            <summary>
            是否是事物的
            </summary>
        </member>
        <member name="P:SqlBatis.IDbContext.DbContextState">
            <summary>
            数据库上下文状态
            </summary>
        </member>
        <member name="P:SqlBatis.IDbContext.DbContextType">
            <summary>
            数据库上下文类型
            </summary>
        </member>
        <member name="M:SqlBatis.IDbContext.BeginTransaction">
            <summary>
            开启事务会话
            </summary>
        </member>
        <member name="M:SqlBatis.IDbContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务会话
            </summary>
            <param name="level">事务隔离级别</param>
        </member>
        <member name="M:SqlBatis.IDbContext.Close">
            <summary>
            关闭连接和事务
            </summary>
        </member>
        <member name="M:SqlBatis.IDbContext.CommitTransaction">
            <summary>
            提交当前事务会话
            </summary>
        </member>
        <member name="M:SqlBatis.IDbContext.QueryMultiple(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行多结果集查询，返回IMultiResult
            </summary>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.Query(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单结果集查询，并返回dynamic类型的结果集
            </summary>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.QueryAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            异步执行单结果集查询，并返回dynamic类型的结果集
            </summary>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.Query``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行单结果集查询，并返回T类型的结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.QueryAsync``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            异步执行单结果集查询，并返回T类型的结果集
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.Execute(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行无结果集查询，并返回受影响的行数
            </summary>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.ExecuteAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            异步执行无结果集查询，并返回受影响的行数
            </summary>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.ExecuteScalar(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行无结果集查询，并返回指定类型的数据
            </summary>
            <param name="sql"></param>
            <param name="parameter"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行无结果集查询，并返回指定类型的数据
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            异步执行无结果集查询，并返回指定类型的数据
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql命令</param>
            <param name="parameter">参数</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.Open">
            <summary>
            打开数据库连接
            </summary>
        </member>
        <member name="M:SqlBatis.IDbContext.OpenAsync">
            <summary>
            异步打开数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbContext.RollbackTransaction">
            <summary>
            回滚当前事务会话
            </summary>
        </member>
        <member name="T:SqlBatis.DbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:SqlBatis.DbContext.CreateDbCommand(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            创建DbCommand
            </summary>
            <param name="sql"></param>
            <param name="parameter"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbContext.CreateDbParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            创建数据库参数
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbContext.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="P:SqlBatis.DbContextBuilder.Connection">
            <summary>
            设置要托管的数据库连接
            </summary>
        </member>
        <member name="P:SqlBatis.DbContextBuilder.DbContextType">
            <summary>
            设置数据库类型
            </summary>
        </member>
        <member name="T:SqlBatis.DbContextExtensions">
            <summary>
            扩展IDbContext
            </summary>
        </member>
        <member name="T:SqlBatis.IDbGridReader">
            <summary>
            DataReader多个结果集
            </summary>
        </member>
        <member name="M:SqlBatis.IDbGridReader.Read">
            <summary>
            返回当前dynamic类型结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadAsync">
            <summary>
            异步返回当前dynamic类型结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.Read``1">
            <summary>
            返回当前T结果集
            </summary>
            <typeparam name="T">结果集类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadAsync``1">
            <summary>
             异步返回当前T类型结果集
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadFirst">
            <summary>
            返回当前dynamic类型结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadFirstAsync">
            <summary>
            异步返回当前dynamic类型结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadFirst``1">
            <summary>
            返回当前T类型结果
            </summary>
            <typeparam name="T">结果集类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbGridReader.ReadFirstAsync``1">
            <summary>
            异步返回当前T类型结果
            </summary>
            <typeparam name="T">结果集类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.SqlBuilder">
            <summary>
            构建动态sql
            </summary>
        </member>
        <member name="T:SqlBatis.DbUpdateConcurrencyException">
            <summary>
            修改数据时并发冲突
            </summary>
        </member>
        <member name="T:SqlBatis.Expressions.BooleanExpressionResovle">
            <summary>
            条件表达式解析
            </summary>
        </member>
        <member name="T:SqlBatis.Expressions.ExpressionResovle">
            <summary>
            数据表达式解析基类
            </summary>
        </member>
        <member name="F:SqlBatis.Expressions.ExpressionResovle._singleTable">
            <summary>
            是否单表操作
            </summary>
        </member>
        <member name="F:SqlBatis.Expressions.ExpressionResovle._tableAliasNames">
            <summary>
            表别名
            </summary>
        </member>
        <member name="M:SqlBatis.Expressions.ExpressionResovle.#ctor(System.Boolean)">
            <summary>
            数据库表达式解析基类
            </summary>
            <param name="singleTable">是否单表操作</param>
        </member>
        <member name="M:SqlBatis.Expressions.ExpressionResovle.VisitExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            解析常量表达式，并返回值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Expressions.ExpressionResovle.GetDbColumnNameAsAlias(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取数据库字段名转换成别名
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Expressions.ExpressionResovle.GetDbTableNameAsAlias(System.Type)">
            <summary>
            获取数据库表转换成别名名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Expressions.ExpressionResovle.Resovle">
            <summary>
            解析出一个字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.Expressions.FunctionExpressionResovle">
            <summary>
            数据库函数解析
            </summary>
        </member>
        <member name="T:SqlBatis.Expressions.GroupExpressionResovle">
            <summary>
            分组表达式解析解析
            </summary>
        </member>
        <member name="T:SqlBatis.Expressions.OrderExpressionResovle">
            <summary>
            排序表达式解析
            </summary>
        </member>
        <member name="T:SqlBatis.DbConvertProvider">
            <summary>
            提供数据转换能力
            </summary>
        </member>
        <member name="F:SqlBatis.DbConvertProvider._serializers">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="F:SqlBatis.DbConvertProvider._deserializers">
            <summary>
            参数解序列化器
            </summary>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.GetEntityHandler``1(System.Data.IDataRecord)">
            <summary>
            获取实体序列化器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.GetDynamicHandler">
            <summary>
            获取动态实体序列化器
            </summary>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.GetTypeDbParameterHandler(System.Type)">
            <summary>
            获取类成员到字典的一个转换器
            </summary>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.CreateDbParameter(System.String,System.Object)">
            <summary>
            创建数据库参数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.FindEntityConstructor(System.Type)">
            <summary>
            获取参数最多的构造器
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.FindEntityConstructorParameter(System.Reflection.ConstructorInfo,SqlBatis.DataRecordField)">
            <summary>
            获取参数在DataReader中的顺序
            </summary>
            <param name="constructor"></param>
            <param name="recordField"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.FindEntityMember(System.Type,SqlBatis.DataRecordField)">
            <summary>
            获取实体的成员信息
            </summary>
            <param name="entityType">实体类型</param>
            <param name="fieldInfo">数据字段信息</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.ChangeType``1(System.Object)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.FindConvertMethod(System.Type,System.Type,SqlBatis.DataRecordField)">
            <summary>
            获取映射实体成员的转换方法
            </summary>
            <param name="entityType">实体类型</param>
            <param name="memberType">成员类型</param>
            <param name="recordField">数据库字段</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.ConvertToDynamic(System.Data.IDataRecord,System.Int32)">
            <summary>
            获取动态映射值
            </summary>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.CreateTypeDeserializerHandler(System.Type)">
            <summary>
            创建动态方法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.CreateTypeSerializerHandler``1(System.Data.IDataRecord)">
            <summary>
            创建动态方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.GetUnderlyingType(System.Type)">
            <summary>
            获取类型的非Nullable类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DbConvertProvider.IsNullableType(System.Type)">
            <summary>
            判断是否是null的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.SerializerKey">
            <summary>
            获取实体序列化器的hashkey
            </summary>
        </member>
        <member name="T:SqlBatis.DataRecordField">
            <summary>
            DataReader中的行信息
            </summary>
        </member>
        <member name="P:SqlBatis.DataRecordField.TypeName">
            <summary>
            数据库类型名称
            </summary>
        </member>
        <member name="P:SqlBatis.DataRecordField.DataType">
            <summary>
            数据库对应的C#属性类型
            </summary>
        </member>
        <member name="P:SqlBatis.DataRecordField.DataName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:SqlBatis.DataRecordField.Ordinal">
            <summary>
            列序列
            </summary>
        </member>
        <member name="M:SqlBatis.DataRecordField.#ctor(System.Int32,System.String,System.Type,System.String)">
            <summary>
            数据库字段描述
            </summary>
            <param name="ordinal"></param>
            <param name="typeName"></param>
            <param name="dataType"></param>
            <param name="dataName"></param>
        </member>
        <member name="T:SqlBatis.IDbMetaInfoProvider">
            <summary>
            数据库元信息提供程序
            </summary>
        </member>
        <member name="M:SqlBatis.IDbMetaInfoProvider.GetTable(System.Type)">
            <summary>
            获取表的元信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.IDbMetaInfoProvider.GetColumns(System.Type)">
            <summary>
            获取字段的元信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.AnnotationDbMetaInfoProvider">
            <summary>
            注解方案数据库元信息
            </summary>
        </member>
        <member name="T:SqlBatis.DbTableMetaInfo">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:SqlBatis.DbTableMetaInfo.TableName">
            <summary>
            数据库表名称
            </summary>
        </member>
        <member name="P:SqlBatis.DbTableMetaInfo.CsharpName">
            <summary>
            Csharp表名称
            </summary>
        </member>
        <member name="T:SqlBatis.DbColumnMetaInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsConcurrencyCheck">
            <summary>
            是否并发检查列
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsDefault">
            <summary>
            是否默认值约束
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsNotMapped">
            <summary>
            是否是数据库字段
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.ColumnName">
            <summary>
            数据库字段名
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.CsharpName">
            <summary>
            Csharp字段名
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.CsharpType">
            <summary>
            Csharp类型
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsPrimaryKey">
            <summary>
            是否主键约束
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsIdentity">
            <summary>
            是否是自增列
            </summary>
        </member>
        <member name="P:SqlBatis.DbColumnMetaInfo.IsComplexType">
            <summary>
            是否为计算列
            </summary>
        </member>
        <member name="T:SqlBatis.Queryables.DbQueryable`1">
            <summary>
            基础操作
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.GetConcurrencyColumnValue(System.Type)">
            <summary>
            获取并发列的值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.DefaultSelectColumnsExpression">
            <summary>
            默认查询字段列表表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.EntityToDictionary``1(``0)">
            <summary>
            实体属性转换成字典
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.IgnoreAllNullColumns(System.Collections.Generic.IReadOnlyList{SqlBatis.DbColumnMetaInfo})">
            <summary>
            护理空值列
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.BuildInsertCommand(System.Boolean)">
            <summary>
            构建新增命令
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.BuildBatchInsertCommand(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构建批量新增命令
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.BuildUpdateCommand">
            <summary>
            构建更新命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.BuildDeleteCommand">
            <summary>
            构建删除命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.DbQueryable`1.CheckSql(System.String)">
            <summary>
            防止注入检测
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.Queryables.IDbQueryable`1">
            <summary>
            单表查询
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Count(System.Nullable{System.Int32})">
            <summary>
            count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.CountAsync(System.Nullable{System.Int32})">
            <summary>
            异步count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Count``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.CountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            异步count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Delete(System.Nullable{System.Int32})">
            <summary>
            delete查询
            </summary>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.DeleteAsync(System.Nullable{System.Int32})">
            <summary>
            异步delete查询
            </summary>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            delete查询
            </summary>
            <param name="expression">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步delete查询
            </summary>
            <param name="expression">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Exists(System.Nullable{System.Int32})">
            <summary>
            exists查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.ExistsAsync(System.Nullable{System.Int32})">
            <summary>
            异步exists查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            exists查询
            </summary>
            <param name="expression">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步exists查询
            </summary>
            <param name="expression">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Update(System.Nullable{System.Int32})">
            <summary>
            update查询，如果没有指定where则应用到所有记录
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.UpdateAsync(System.Nullable{System.Int32})">
            <summary>
            异步update查询，如果没有指定where则应用到所有记录
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Update``1(``0)">
            <summary>
            update查询，默认根据Primarkey更新，如果存在where则仅使用指定更新条件，
            无法通过该接口更新主键字段和主键字段</summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.UpdateAsync``1(``0)">
            <summary>
            异步update查询，默认根据Primarkey更新，如果存在where则仅使用指定更新条件，
            无法通过该接口更新主键字段和主键字段</summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Insert``1(``0)">
            <summary>
            insert查询，该接口会忽略identity字段
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertAsync``1(``0)">
            <summary>
            异步insert查询，该接口会忽略identity字段
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertReturnId``1(``0)">
            <summary>
            insert查询，并返回id，该接口会忽略identity字段
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertReturnIdAsync``1(``0)">
            <summary>
            异步insert查询，并返回id，该接口会忽略identity字段
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量insert查询
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            异步批量insert查询，该接口会忽略identity字段
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertBatch(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量新增
            </summary>
            <param name="entitys"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.InsertBatchAsync(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            批量新增
            </summary>
            <param name="entitys"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Select(System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectAsync(System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectMany(System.Nullable{System.Int32})">
            <summary>
            分页select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns>结果集，总记录数</returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectManyAsync(System.Nullable{System.Int32})">
            <summary>
            异步分页select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SelectManyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            异步分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Single(System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SingleAsync(System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Single``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Ignore(System.Boolean)">
            <summary>
            忽略所有空列
            </summary>
            <param name="ignoreAllNullColumns"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            在insert,update,select时忽略字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
            set查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            set查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="column">字段</param>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Take(System.Int32,System.Boolean)">
            <summary>
            take查询，从下标为0的行获取count条记录
            </summary>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Skip(System.Int32,System.Int32,System.Boolean)">
            <summary>
            skip，从下标为index的行获取count条记录
            </summary>
            <param name="index">起始下标</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Page(System.Int32,System.Int32,System.Boolean)">
            <summary>
            page查询，从下标为(index-1)*count的行获取count条记录
            </summary>
            <param name="index">起始页码</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.With(System.String)">
            <summary>
            指定读锁
            </summary>
            <param name="lockname"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            where查询，多个where有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            having查询，多个having查询有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            group查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            orderby查询，升序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            orderby查询，降序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            求和
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
            <summary>
            异步求和
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.Queryables.IDbQueryable`2">
            <summary>
            linq 查询
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Join(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            内连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.LeftJoin(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            左外连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.RightJoin(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            右外连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Count(System.Nullable{System.Int32})">
            <summary>
            count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.CountAsync(System.Nullable{System.Int32})">
            <summary>
            异步count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Count``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.CountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            异步count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.SelectManyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            异步分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Single``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Take(System.Int32,System.Boolean)">
            <summary>
            take查询，从下标为0的行获取count条记录
            </summary>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Skip(System.Int32,System.Int32,System.Boolean)">
            <summary>
            skip，从下标为index的行获取count条记录
            </summary>
            <param name="index">起始下标</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Page(System.Int32,System.Int32,System.Boolean)">
            <summary>
            page查询，从下标为(index-1)*count的行获取count条记录
            </summary>
            <param name="index">起始页码</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.With(System.String)">
            <summary>
            指定读锁
            </summary>
            <param name="lockname"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}},System.Boolean)">
            <summary>
            where查询，多个where有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.Having(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}},System.Boolean)">
            <summary>
            having查询，多个having查询有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            group查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Boolean)">
            <summary>
            orderby查询，升序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Boolean)">
            <summary>
            orderby查询，降序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.Queryables.IDbQueryable`3">
            <summary>
            linq 查询
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Join(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            内连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            内连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            左外连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            右外连接
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Count(System.Nullable{System.Int32})">
            <summary>
            count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.CountAsync(System.Nullable{System.Int32})">
            <summary>
            异步count查询
            </summary>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Count``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.CountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            异步count查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.SelectManyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            异步分页select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Single``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Nullable{System.Int32})">
            <summary>
            异步select查询
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">字段列表</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Take(System.Int32,System.Boolean)">
            <summary>
            take查询，从下标为0的行获取count条记录
            </summary>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Skip(System.Int32,System.Int32,System.Boolean)">
            <summary>
            skip，从下标为index的行获取count条记录
            </summary>
            <param name="index">起始下标</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Page(System.Int32,System.Int32,System.Boolean)">
            <summary>
            page查询，从下标为(index-1)*count的行获取count条记录
            </summary>
            <param name="index">起始页码</param>
            <param name="count">记录个数</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.With(System.String)">
            <summary>
            指定读锁
            </summary>
            <param name="lockname"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}},System.Boolean)">
            <summary>
            where查询，多个where有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.Having(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}},System.Boolean)">
            <summary>
            having查询，多个having查询有效使用and连接
            </summary>
            <param name="expression">表达式</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            group查询
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Boolean)">
            <summary>
            orderby查询，升序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Queryables.IDbQueryable`3.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Boolean)">
            <summary>
            orderby查询，降序
            </summary>
            <typeparam name="TResult">类型推断</typeparam>
            <param name="expression">字段列表</param>
            <param name="condition">是否有效</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.Operator">
            <summary>
            数据库操作符
            </summary>
        </member>
        <member name="M:SqlBatis.Operator.In(System.Object,System.Collections.IEnumerable)">
            <summary>
            in
            </summary>
            <param name="column">字段</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.In(System.Object,System.Object[])">
            <summary>
            in
            </summary>
            <param name="column">字段</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotIn(System.Object,System.Collections.IEnumerable)">
            <summary>
            not in
            </summary>
            <param name="column">字段</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotIn(System.Object,System.Object[])">
            <summary>
            not in
            </summary>
            <param name="column">字段</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.Contains(System.String,System.String)">
            <summary>
            like %value%
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotContains(System.String,System.String)">
            <summary>
            not like %value%
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.StartsWith(System.String,System.String)">
            <summary>
            like value%
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotStartsWith(System.String,System.String)">
            <summary>
            not like value%
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.EndsWith(System.String,System.String)">
            <summary>
            like %value
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotEndsWith(System.String,System.String)">
            <summary>
            not like %value
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.Regexp(System.String,System.String)">
            <summary>
            regex value
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.NotRegexp(System.String,System.String)">
            <summary>
            not regex value
            </summary>
            <param name="column">字段</param>
            <param name="value">参数</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.ResovleExpressionType(System.Linq.Expressions.ExpressionType)">
            <summary>
            解析表达式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.Operator.ResovleExpressionType(System.String)">
            <summary>
            解析表达式
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.SqlBatisSettings">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="P:SqlBatis.SqlBatisSettings.AllowConstantExpressionResultIsNull">
            <summary>
            是否允许常量表达式的结果为：默认不允许将抛出NullReferenceException
            </summary>
        </member>
        <member name="P:SqlBatis.SqlBatisSettings.IgnoreDbCommandInvalidParameters">
            <summary>
            是否忽略DbCommand中的无效参数
            </summary>
        </member>
        <member name="P:SqlBatis.SqlBatisSettings.DbMetaInfoProvider">
            <summary>
            数据库元信息提供程序
            </summary>
        </member>
        <member name="P:SqlBatis.SqlBatisSettings.DbDataConvertProvider">
            <summary>
            实体映射器
            </summary>
        </member>
    </members>
</doc>
